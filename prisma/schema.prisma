generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // Usando apenas o Prisma Accelerate - sem conexão direta
}

model ControleCarga {
  id              String         @id @default(uuid())
  dataCriacao     DateTime       @default(now())
  motorista       String
  responsavel     String
  transportadora  Transportadora @default(ACCERT)
  numeroManifesto String?
  qtdPallets      Int            @default(0)
  observacao      String?
  finalizado      Boolean        @default(false)
  cpfMotorista    String         @default("PENDENTE")
  notas           NotaFiscal[]
  pedidos         Pedido[]



  // Campos de assinatura digital
  assinaturaMotorista       String?   @db.Text
  assinaturaResponsavel     String?   @db.Text
  dataAssinaturaMotorista   DateTime?
  dataAssinaturaResponsavel DateTime?
}

model Pedido {
  id           String           @id @default(uuid())
  numeroPedido String
  dataCriacao  DateTime         @default(now())
  controleId   String?
  controle     ControleCarga?   @relation(fields: [controleId], references: [id])
  conferido    PedidoConferido?
}

model NotaFiscal {
  id          String         @id @default(uuid())
  dataCriacao DateTime       @default(now())
  codigo      String
  numeroNota  String
  controleId  String?
  usuarioId   String?
  volumes     String         @default("1")
  controle    ControleCarga? @relation(fields: [controleId], references: [id])
  usuario     Usuario?       @relation(fields: [usuarioId], references: [id])
}

model Usuario {
  id                String            @id @default(uuid())
  nome              String
  email             String            @unique
  senha             String
  tipo              TipoUsuario       @default(USUARIO)
  ativo             Boolean           @default(true)
  dataCriacao       DateTime          @default(now())
  ultimoAcesso      DateTime?
  notas             NotaFiscal[]
  auditoriasAcesso  AuditoriaAcesso[]

  // Relações para PedidoConferido
  pedidosSeparados  PedidoConferido[] @relation("Separacao")
  pedidosConferidos PedidoConferido[] @relation("Conferencia")
  pedidosAuditados  PedidoConferido[] @relation("Auditoria")
  pedidosValidados  PedidoConferido[] @relation("Validacao")

  // Relações para Gamificação
  pontuacao         PontuacaoUsuario?
  historicoPontos   HistoricoPontuacao[]
}

model AuditoriaAcesso {
  id        String   @id @default(uuid())
  usuarioId String
  acao      String
  descricao String?
  ip        String?
  userAgent String?
  dataHora  DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([dataHora])
  @@map("auditoria_acesso")
}

model ConfiguracaoSistema {
  id              String   @id @default(uuid())
  chave           String   @unique
  valor           String
  descricao       String?
  tipo            String   @default("string")
  opcoes          String?
  editavel        Boolean  @default(true)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  @@index([chave])
}

model Motorista {
  id               String         @id @default(uuid())
  dataCriacao      DateTime       @default(now())
  nome             String
  telefone         String
  cpf              String         @unique
  cnh              String
  transportadoraId Transportadora
}

enum Transportadora {
  ACERT // valor legado (em desuso)
  ACCERT
  EXPRESSO_GOIAS
}

model PedidoConferido {
  id                    String   @id @default(uuid())
  dataCriacao           DateTime @default(now())
  pedido                Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId              String   @unique
  
  // --- Campos da Separação ---
  separadorId String?
  separador   Usuario? @relation("Separacao", fields: [separadorId], references: [id])

  // --- Campos da Conferência ---
  conferenciaRealizada  Boolean   @default(false)
  dataConferencia       DateTime?
  conferenteId          String?
  conferente            Usuario?  @relation("Conferencia", fields: [conferenteId], references: [id])
  pedido100             Boolean?
  inconsistencia        Boolean?
  motivosInconsistencia String[]

  // --- Campos da Auditoria ---
  auditoriaRealizada  Boolean   @default(false)
  dataAuditoria       DateTime?
  auditorId           String?
  auditor             Usuario?  @relation("Auditoria", fields: [auditorId], references: [id])
  auditoriaComErro    Boolean?
  observacaoAuditoria String?
  
  observacoes           String?

  // --- Campos da Validação do Gerente ---
  statusValidacao   StatusValidacao @default(PENDENTE)
  dataValidacao     DateTime?
  validadorId       String?
  validador         Usuario? @relation("Validacao", fields: [validadorId], references: [id])
}

// Tabela para armazenar pontuação dos usuários no sistema de gamificação
model PontuacaoUsuario {
  id                String   @id @default(uuid())
  usuarioId         String   @unique
  usuario           Usuario  @relation(fields: [usuarioId], references: [id])
  pontuacaoTotal    Int      @default(0)
  pedidosCorretos   Int      @default(0)
  pedidosIncorretos Int      @default(0)
  posicaoRanking    Int?
  dataAtualizacao   DateTime @updatedAt
  dataCriacao       DateTime @default(now())

  @@index([pontuacaoTotal])
  @@index([posicaoRanking])
}

// Tabela para histórico de pontuações
model HistoricoPontuacao {
  id            String   @id @default(uuid())
  usuarioId     String
  usuario       Usuario  @relation(fields: [usuarioId], references: [id])
  pedidoId      String?
  acao          AcaoPontuacao
  pontosGanhos  Int      // Pode ser negativo para perda de pontos
  descricao     String?
  dataAcao      DateTime @default(now())

  @@index([usuarioId])
  @@index([dataAcao])
}

enum AcaoPontuacao {
  PEDIDO_CORRETO
  PEDIDO_INCORRETO
  BONUS_ADMIN
  PENALIDADE_ADMIN
}

enum StatusValidacao {
  PENDENTE
  VALIDADO_CORRETO
  VALIDADO_INCORRETO
}

enum TipoUsuario {
  ADMIN
  GERENTE
  USUARIO
  FUNCIONARIO
  CLIENTE
  SEPARADOR
  CONFERENTE
  AUDITOR
}

