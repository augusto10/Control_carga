generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  tipo          TipoUsuario @default(USUARIO)
  accounts      Account[]
  sessions      Session[]
  checklists    ForkliftChecklist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models

model NotaFiscal {
  id              String        @id @default(uuid())
  numeroNota      String
  codigo          String        @unique
  emitente        String
  destinatario    String
  valor           Float
  peso            Float
  status          String        @default("Dispon√≠vel")
  dataCriacao     DateTime      @default(now())
  dataAtualizacao DateTime      @updatedAt
  controleId      String?
  controle        ControleCarga? @relation(fields: [controleId], references: [id], onDelete: SetNull)

  @@index([controleId])
}

model ControleCarga {
  id                String        @id @default(uuid())
  numeroManifesto   Int           @unique @default(autoincrement())
  motorista         String
  cpfMotorista      String?
  transportadora    Transportadora
  responsavel       String
  qtdPallets        Int
  observacao        String?
  finalizado        Boolean       @default(false)
  dataCriacao       DateTime      @default(now())
  dataAtualizacao   DateTime      @updatedAt
  notas             NotaFiscal[]
  assinaturas       Assinatura[]
}

model Assinatura {
  id                String           @id @default(uuid())
  tipo              String
  data              DateTime         @default(now())
  imagemBase64      String?          @db.Text
  statusAssinatura  StatusAssinatura @default(PENDENTE)
  dataAtualizacao   DateTime         @updatedAt
  controleId        String
  controle          ControleCarga    @relation(fields: [controleId], references: [id], onDelete: Cascade)

  @@index([controleId])
}

model ForkliftChecklist {
  id                 String   @id @default(uuid())
  data               DateTime @default(now())
  empilhadeiraNumero String
  turno              String
  operadorNome       String
  horimetroInicial   Float
  horimetroFinal     Float?
  itens              Json
  observacoesGeras   String?  @db.Text
  usuarioId          String
  usuario            User     @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
}


// Enums

enum TipoUsuario {
  ADMIN
  GERENTE
  USUARIO
  FUNCIONARIO
  CLIENTE
}

enum Transportadora {
  ACCERT
  EXPRESSO_GOIAS
}

enum StatusAssinatura {
  PENDENTE
  CONCLUIDA
  REJEITADA
}
