generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ControleCarga {
  id                        String         @id @default(uuid())
  dataCriacao               DateTime       @default(now())
  motorista                 String
  responsavel               String
  transportadora            Transportadora @default(ACCERT)
  numeroManifesto           String?
  qtdPallets                Int            @default(0)
  observacao                String?
  finalizado                Boolean        @default(false)
  cpfMotorista              String         @default("PENDENTE")
  auditorId                 String?
  auditoriaComErro          Boolean?
  auditoriaRealizada        Boolean        @default(false)
  conferenciaRealizada      Boolean        @default(false)
  conferenteId              String?
  dataAuditoria             DateTime?
  dataConferencia           DateTime?
  inconsistencia            Boolean?
  motivosInconsistencia     String[]
  observacaoAuditoria       String?
  pedido100                 Boolean?
  separadorId               String?
  assinaturaMotorista       String?
  assinaturaResponsavel     String?
  dataAssinaturaMotorista   DateTime?
  dataAssinaturaResponsavel DateTime?
  notas                     NotaFiscal[]
}

model NotaFiscal {
  id          String         @id @default(uuid())
  dataCriacao DateTime       @default(now())
  codigo      String
  numeroNota  String
  controleId  String?
  usuarioId   String?
  volumes     String         @default("1")
  controle    ControleCarga? @relation(fields: [controleId], references: [id])
  usuario     Usuario?       @relation(fields: [usuarioId], references: [id])
}

model Usuario {
  id               String            @id @default(uuid())
  nome             String
  email            String            @unique
  senha            String
  tipo             TipoUsuario       @default(USUARIO)
  ativo            Boolean           @default(true)
  dataCriacao      DateTime          @default(now())
  ultimoAcesso     DateTime?
  notas            NotaFiscal[]
  auditoriasAcesso AuditoriaAcesso[]
}

model AuditoriaAcesso {
  id        String   @id @default(uuid())
  usuarioId String
  acao      String
  descricao String?
  ip        String?
  userAgent String?
  dataHora  DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@index([dataHora])
  @@map("auditoria_acesso")
}

model ConfiguracaoSistema {
  id              String   @id @default(uuid())
  chave           String   @unique
  valor           String
  descricao       String?
  tipo            String   @default("string")
  opcoes          String?
  editavel        Boolean  @default(true)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  @@index([chave])
}

model Motorista {
  id               String         @id @default(uuid())
  dataCriacao      DateTime       @default(now())
  nome             String
  telefone         String
  cpf              String         @unique
  cnh              String
  transportadoraId Transportadora
}

model Pedido {
  id           String   @id
  numeroPedido String
  dataCriacao  DateTime @default(now())
  controleId   String?
  conferidoId  String?
}

model PedidoConferido {
  id                    String   @id
  dataCriacao           DateTime @default(now())
  pedidoId              String   @unique
  conferenteId          String
  pedido100             Boolean
  inconsistencia        Boolean
  motivosInconsistencia String[]
  observacoes           String?
}

enum Transportadora {
  ACERT
  EXPRESSO_GOIAS
  ACCERT
}

enum TipoUsuario {
  ADMIN
  GERENTE
  USUARIO
  FUNCIONARIO
  CLIENTE
  SEPARADOR
  CONFERENTE
  AUDITOR
}
